
#include <iostream>
#include <vector>
#include "kmeans.h"
#include <mpi.h>

using namespace std;

//end is actually end_index + 1.
double* serialize(vector<Point>& points, int& return_array_size)
{
		int num_points = points.size();
		int dimensions = points[0].get_coordinates().size();
		return_array_size = 1+(num_points)*(dimensions+2);
		double* return_array = new double[return_array_size];
		int index = 0;
		return_array[index++] = (double)num_points;

		for(int i=0; i<num_points; ++i)
		{
			vector<double> coordinates = points[i].get_coordinates();
			for(int j=0; j<dimensions; ++j)
			{
				return_array[index++] = coordinates[j];
			}

			return_array[index++] = (double)points[i].get_cluster_id();
			return_array[index++] = points[i].get_cluster_distance();
		}

		return return_array;
}

vector<Point> deserialize(double* input,int dimensions)
{
		int index = 0;
		vector<Point> points;
		int num_points = (int)input[index++];

		vector<double> coordinates;
		for(int i=0; i< num_points; ++i)
		{
				coordinates.clear();
				for(int j=0; j<dimensions; ++j)
				{
					coordinates.push_back(input[index++]);
				}

				points.push_back(Point(coordinates));
				points[i].set_cluster_id((int)input[index++]);
				points[i].set_cluster_distance(input[index++]);
		}

		return points;
}

int main(int argc, char **argv)
{
	if(argc < 4)
	{
	    cout<<"Usage: ./kmeans dimensions no_of_points k\n"
	}

	int dimensions = atoi(argv[1]);
	int num_points = atoi(argv[2]);
	int K = atoi(argv[3]);

	MPI_Init (&argc, &argv);
	int mpi_id;//The id of this processor
	int mpi_size;// Total number of processors in MPI environment
	MPI_Comm_size(MPI_COMM_WORLD, &mpi_size);
	MPI_Comm_rank(MPI_COMM_WORLD, &mpi_id);

	double ts=0.0;
	double te=0.0;	
	ts = MPI_Wtime();  


	vector<Point> points;//points contained by this processor are stored here
	vector<Point> clusters;//current cluster
	vector<Point> input_clusters;
	double x;

	if( mpi_id == 0 )
	{
		vector<Point> dataset;

		dataset = get_dataset(dimensions,K,num_points,input_clusters,x);//NO_OF_POINTS may change after this step
		sort(dataset.begin(),dataset.end(),greater_than);
		int no_of_points = dataset.size();
		int points_per_cluster = no_of_points/K;


		//Create the clusters
		for(int j=0; j<points_per_cluster*K;j+=points_per_cluster)
		{
			vector<double> sum_ppc(dimensions,0); //sum of points per cluster(ppc)
			for(int r=j; r<j+points_per_cluster;r++)
			{
				for(int z=0;z<dimensions;z++)
				{
					sum_ppc[z] += (dataset[r].get_coordinates())[z];
				}
			}

			for(int z=0;z<dimensions;z++)
			{
				sum_ppc[z] = sum_ppc[z]/points_per_cluster;
			}
			clusters.push_back(Point(sum_ppc));
		}

		//Communicate to others about the clusters
		double* send_array;
		int send_size;

		send_array = serialize(clusters,send_size);

		for(int i=1; i< mpi_size; ++i)
		{
			MPI_Send(send_array,send_size,MPI_DOUBLE,i,1,MPI_COMM_WORLD);
		}

		//Communicate to others about points
		int points_per_processor = (no_of_points/mpi_size);
		vector<Point> temp;

		for(int i=1; i<mpi_size; ++i)
		{
			temp.clear();
			if(i < (mpi_size -1))
			{	
				for(int j=i*points_per_processor;j<(i+1)*points_per_processor;j++)
				temp.push_back(dataset[j]);
				send_array = serialize(temp,send_size);
			}
			else
			{
				for(int j=i*points_per_processor;j<no_of_points;j++)
				temp.push_back(dataset[j]);
				send_array = serialize(temp,send_size);
			}

			MPI_Send(send_array,send_size,MPI_DOUBLE,i,2,MPI_COMM_WORLD);
		}


		/* Initialize processor-0 */
		for(int i=0; i<points_per_processor; ++i)
		{
			points.push_back(dataset[i]);		
		}

	}

	else
	{
		int size_expected = ((num_points/mpi_size)+3*mpi_size)*(dimensions+2)+3;
		double* receive_array = new double[size_expected];
		MPI_Status status;
		MPI_Recv(receive_array,size_expected,MPI_DOUBLE,0,1, MPI_COMM_WORLD, &status);
		clusters = deserialize(receive_array);
		MPI_Recv(receive_array,size_expected,MPI_DOUBLE,0,2, MPI_COMM_WORLD, &status);
		points = deserialize(receive_array);
	}

	MPI_Barrier(MPI_COMM_WORLD);
	int t=0;
	// Either clusters stop changing or 1000 iterations
	while(t++<1000)
	{
		//Associate the points to the clusters
		for(int j=0;j<points.size();j++)
		{
			  set_min_cluster(clusters,points[j]);
		}

		//Move the clusters according to the clusters and associated points
		vector<double> temp(dimensions,0);//just to create next variable

		/* Cluster-Id variable in point will be used to tell about no_of_points_in_cluster */
		vector<Point> sum_of_points_in_cluster(K,temp);


		for(int j=0;j<points.size();j++)
		{
			 (sum_of_points_in_cluster[points[j].get_cluster_id()]).add(points[j]);
			 int num_points_in_cluster = (sum_of_points_in_cluster[points[j].get_cluster_id()]).get_cluster_id();
			 (sum_of_points_in_cluster[points[j].get_cluster_id()]).set_cluster_id(num_points_in_cluster + 1);
		}

		double max_distance = 0;
		int farthest_point_index = -1;
		for(int j=0; j< points.size(); j++)
		{
			if(points[j].get_cluster_distance() > max_distance)
			{
				max_distance = points[j].get_cluster_distance();
				farthest_point_index = j;
			}
		}

		Point farthest_point(points[farthest_point_index]);
		farthest_point.set_cluster_distance(max_distance);

		/*
		 * Receive from other processors their sums and farthest points
		 * Send to all processors the new cluster points
		 */
		if(mpi_id == 0)
		{
			int size_expected = ((num_points/mpi_size)+mpi_size)*(dimensions+2)+3;
			double* receive_array = new double[size_expected];

			MPI_Status status;

			for(int i=1; i<mpi_size; ++i)
			{
				MPI_Recv(receive_array,size_expected,MPI_DOUBLE,i, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
				vector<Point> received_sum_of_points;
				received_sum_of_points = deserialize(receive_array);

				for(int j=0; j<K; ++j)
				{
					sum_of_points_in_cluster[j].add(received_sum_of_points[j]);
					int num_points_in_cluster = sum_of_points_in_cluster[j].get_cluster_id();
					sum_of_points_in_cluster[j].set_cluster_id(num_points_in_cluster + received_sum_of_points[j].get_cluster_id());
				}

				
				if(received_sum_of_points[K].get_cluster_distance()>farthest_point.get_cluster_distance())
				{
					farthest_point.set_coordinates(received_sum_of_points[K].get_coordinates());
					farthest_point.set_cluster_distance(received_sum_of_points[K].get_cluster_distance());
				}
				
			}

		    bool farthest_point_assigned = false;
		    bool clusters_changing = false;	
		    for(int j=0;j<K;j++)
		    {
		    	int num_points_in_cluster = sum_of_points_in_cluster[j].get_cluster_id();
		    	if(num_points_in_cluster > 0)
		    	{
		    		sum_of_points_in_cluster[j].divide_by(num_points_in_cluster);
				if(!clusters_changing && clusters[j].calculate_dist(sum_of_points_in_cluster[j]) > 0.5) clusters_changing = true;
				clusters[j].set_coordinates(sum_of_points_in_cluster[j].get_coordinates());
		    	}
		    	else if(!farthest_point_assigned)
		    	{
		    		clusters[j].set_coordinates(farthest_point.get_coordinates());
		    		farthest_point_assigned = true;
		    	}
		    }

            		//Communicate to others about the clusters
			double* send_array;
			int send_size;

			send_array = serialize(clusters,send_size);
			if(clusters_changing == false) send_array[0]=0;
			for(int i=1; i< mpi_size; ++i)
			{
				MPI_Send(send_array,send_size,MPI_DOUBLE,i,4,MPI_COMM_WORLD);
			}
			if(clusters_changing == false) break;

		}

		/*
		 * Communicate to processor-0 about sums and farthest point
		 * Receive from processor-0 new cluster centers
		 */
		else
		{
			double* send_array;
			int send_size;
			//Piggy Back farthest point
			sum_of_points_in_cluster.push_back(farthest_point);
			send_array = serialize(sum_of_points_in_cluster,send_size);
			MPI_Send(send_array,send_size,MPI_DOUBLE,0,3,MPI_COMM_WORLD);

			int size_expected = ((num_points/mpi_size)+mpi_size)*(dimensions+2)+3;
			double* receive_array = new double[size_expected];

			MPI_Status status;
			MPI_Recv(receive_array,size_expected,MPI_DOUBLE,0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
			if(receive_array[0] == 0) break;//indicates that clusters are not changing anymore
			clusters = deserialize(receive_array);
		}
	}
	if(mpi_id == 0)cout<<check_accuracy(clusters,input_clusters,x)<<endl;
  	te = MPI_Wtime();
  	fprintf(stderr, "Time_Taken %g \n", te-ts);
	MPI_Finalize();
	return 0;
}

